from perceptron import *
from wave_functions import *
import numpy as np


# Sample data: square wave (1), sine wave (0)
X = np.array([
    [1, 0, 1, 0, 1],  # Square wave pattern
    [0, 1, 0, 1, 0],  # Sine wave pattern
    [1, 1, 1, 0, 0],  # Noise pattern
    [0, 0, 1, 1, 0],  # Mixed pattern
])
y = np.array([1, 0, 0, 0])  # Labels: 1 for square wave, 0 otherwise

# Initialize perceptron with input size equal to the feature vector length
perceptron = Perceptron(input_size=X.shape[1])

# Train the perceptron
perceptron.train(X, y, epochs=100)

# Evaluate the perceptron
accuracy = perceptron.evaluate(X, y)
print(f"Accuracy: {accuracy * 100:.2f}%")

# Test prediction
test_input = np.array([1, 0, 1, 0, 1])  # Square wave pattern
prediction = perceptron.predict(test_input)
print(f"Predicted label for test input: {prediction}")

sine_data = []

# for i in range(0,10):
#     if i < 5:
#         sine_data.append(("0", i))
#     else:
#         sine_data.append(("1", i))

# dtype = [("key", "U1"), ("value", "i4")]

# np_sine_data = np.array(sine_data, dtype=dtype)

# result = np_sine_data[np_sine_data["key"] == "1"]

# for i, j in result:
#     print(j)

square_data = []
sawtooth_data = []
triangular_data = []
pulse_data = []
ramp_data = []
exponential_data = []


i = 1

while i < 601:
    if i < 101:
        square_data.append((1, square_wave(i, 10)))
        sine_data.append((0, sine_wave(i, 10)))
    elif i < 201:
        square_data.append((1, square_wave(i, 10)))
        sawtooth_data.append((0, sawtooth_wave(i, 10)))
    elif i < 301:
        square_data.append((1, square_wave(i, 10)))
        triangular_data.append((0, triangular_wave(i, 10)))
    elif i < 401:
        square_data.append((1, square_wave(i, 10)))
        pulse_data.append((0, pulse_wave(i, 10)))
    elif i < 501:
        square_data.append((1, square_wave(i, 10)))
        ramp_data.append((0, ramp_wave(i, 10)))
    elif i < 601:
        square_data.append((1, square_wave(i, 10)))
        exponential_data.append((0, exponential_wave(i, 10)))  

    i+=1

print(len(sine_data))
print(len(sawtooth_data))
print(len(triangular_data))
print(len(pulse_data))
print(len(ramp_data))
print(len(exponential_data))
print(len(square_data))

print(sine_data[1])
print(sawtooth_data[1])
print(triangular_data[1])
print(pulse_data[1])
print(ramp_data[1])
print(exponential_data[1])



dtype = [("key", int), ("value", object)]

sine_array = np.array(sine_data, dtype = dtype)
square_array = np.array(square_data, dtype = dtype)
sawtooth_array = np.array(sawtooth_data, dtype = dtype)
triangular_array = np.array(triangular_data, dtype = dtype)
pulse_array = np.array(pulse_data, dtype = dtype)
ramp_array = np.array(ramp_data, dtype = dtype)
exponential_array = np.array(exponential_data, dtype = dtype)

total_array = np.concat([sine_array, square_array, sawtooth_array, triangular_array, pulse_array, ramp_array, exponential_array])
np.random.shuffle(total_array)

print(np.shape(total_array))

result = total_array[total_array["key"] == 1]
zero_result = total_array[total_array["key"] == 0] 

print(np.shape(result))
print(np.shape(zero_result))

print(total_array[1][1][1:])
training_shape = total_array[1][1]

values = []
labels = []

for key, value in total_array:
    values.append(value)
    labels.append(int(key))

perceptron_2 = Perceptron(input_size=len(training_shape))

perceptron_2.train(values, labels, epochs=100)



test_wave = square_wave(10, 20, 500)
false_wave = sine_wave(10, 20, 500)

new_prediction = perceptron_2.predict(test_wave)
false_prediction = perceptron_2.predict(false_wave)

print(new_prediction)
print(false_prediction)
